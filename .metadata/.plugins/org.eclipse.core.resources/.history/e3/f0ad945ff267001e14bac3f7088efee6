import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import com.capg.policyapp.dao.ClaimDAOImpl;
import com.capg.policyapp.exception.InvalidEntityException;
import com.capg.policyapp.model.Claim;
import com.capg.policyapp.service.ClaimServiceImpl;

public class ClaimServiceImplTest {

    @InjectMocks
    private ClaimServiceImpl claimService;

    @Mock
    private ClaimDAOImpl claimDAOImpl;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddClaim() throws InvalidEntityException {
        // Arrange
        Claim claim = new Claim();
        String policyId = "123";

        when(claimDAOImpl.addClaim(eq(claim), eq(policyId))).thenReturn(claim);

        // Act
        Claim addedClaim = claimService.addClaim(claim, policyId);

        // Assert
        assertNotNull(addedClaim);
        assertEquals(claim, addedClaim);
    }

    @Test
    public void testUpdateClaimStatus() throws InvalidEntityException {
        // Arrange
        String claimId = "456";
        String claimStatus = "Approved";
        Claim updatedClaim = new Claim();

        when(claimDAOImpl.updateClaimStatus(eq(claimId), eq(claimStatus))).thenReturn(updatedClaim);

        // Act
        Claim result = claimService.updateClaimStatus(claimId, claimStatus);

        // Assert
        assertNotNull(result);
        assertEquals(updatedClaim, result);
    }

    @Test
    public void testViewAllClaims() {
        // Arrange
        List<Claim> claims = new ArrayList<>();

        when(claimDAOImpl.viewAllClaims()).thenReturn(claims);

        // Act
        List<Claim> result = claimService.viewAllClaims();

        // Assert
        assertNotNull(result);
        assertEquals(claims, result);
    }

    @Test
    public void testViewClaimById() throws InvalidEntityException {
        // Arrange
        String claimId = "789";
        Claim claim = new Claim();

        when(claimDAOImpl.viewClaimById(eq(claimId))).thenReturn(claim);

        // Act
        Claim result = claimService.viewClaimById(claimId);

        // Assert
        assertNotNull(result);
        assertEquals(claim, result);
    }

    @Test
    public void testViewClaimById_InvalidClaimId() {
        // Arrange
        String invalidClaimId = "999";

        when(claimDAOImpl.viewClaimById(eq(invalidClaimId))).thenReturn(null);

        // Act & Assert
        assertThrows(InvalidEntityException.class, () -> {
            claimService.viewClaimById(invalidClaimId);
        });
    }

    @Test
    public void testGetClaimsByMonthAndYear() {
        // Arrange
        int month = 10;
        int year = 2023;
        List<Claim> claims = new ArrayList<>();

        when(claimDAOImpl.getClaimsByMonthAndYear(eq(month), eq(year))).thenReturn(claims);

        // Act
        List<Claim> result = claimService.getClaimsByMonthAndYear(month, year);

        // Assert
        assertNotNull(result);
        assertEquals(claims, result);
    }

    @Test
    public void testViewClaimsByPolicy() {
        // Arrange
        String policyId = "123";
        List<Claim> claims = new ArrayList<>();

        when(claimDAOImpl.viewClaimsByPolicy(eq(policyId))).thenReturn(claims);

        // Act
        List<Claim> result = claimService.viewClaimsByPolicy(policyId);

        // Assert
        assertNotNull(result);
        assertEquals(claims, result);
    }

    @Test
    public void testViewClaimsByCustomer() {
        // Arrange
        String customerId = "456";
        List<Claim> claims = new ArrayList<>();

        when(claimDAOImpl.viewClaimsByCustomer(eq(customerId))).thenReturn(claims);

        // Act
        List<Claim> result = claimService.viewClaimsByCustomer(customerId);

        // Assert
        assertNotNull(result);
        assertEquals(claims, result);
    }

    @Test
    public void testGetClaimAmountPolicyWise() {
        // Arrange
        Map<String, Integer> claimAmount = new HashMap<>();

        when(claimDAOImpl.getClaimAmountPolicyWise()).thenReturn(claimAmount);

        // Act
        Map<String, Integer> result = claimService.getClaimAmountPolicyWise();

        // Assert
        assertNotNull(result);
        assertEquals(claimAmount, result);
    }
}
